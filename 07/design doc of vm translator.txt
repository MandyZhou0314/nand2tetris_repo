design doc of vm translator

Summary
    The documatation is designed to do the translation from VM commands Bytecode to machine language which is assembly program for computer to excute

Problem to solve
    Whitespace >- includes blank lines and comments, just ingore it
    Pop/push commands >- push/pop segment i
    Arithmetic/logical commands >- add/sub/neg/eq/gt/lt/and/or/not

Architecture
    Source program: xxx.vm
    Generated code: xxx.asm
    Including three modules(main/parser/codewriter) to deal with specific problems and three test files to isolate questions for testing.

Module specification
    Main(file)
        Initialize I/O files and drives parser process by calling correspoding methods
        File open and save
    Parser(read and parses a VM command)
        constructor init (arg:raw_commands)
        first_run_pass
            ignore heading and trailingwhitespace and comments
            save to a new list as first_pass_result
        commandtype
            returns current command type, including C_arithmetic, C_push, C_pop
        arg1
            for C_arithmetic, arg1 returns str command itself(e.g add)
            for C_push and C_pop, returns str memory segment name(e.g local)
        arg2
            only for C_push and C_pop, returns int i(e.g 2)
        TODO: second_pass_result(total list)
            add list from codewriter to total list by using "+"

    CodeWriter(generates assembly code)
        >- get command from parser
        >- true as -1, false as 0 
            @SP,A=M,M=-1  // set to true
        writerarithmetic(arg:command/str) -> list of str
            write the assembly code with the given Arithmetic command
        writerpushpop(push/pop command) -> list of str
            write the assembly code with the given push/pop command